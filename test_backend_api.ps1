# Test Backend API v·ªõi PowerShell
# Ch·∫°y: .\test_backend_api.ps1

Write-Host "üîç Testing Backend Health..." -ForegroundColor Cyan

# 1. Test Health Check
try {
    $healthResponse = Invoke-RestMethod -Uri "http://14.225.206.98:8080/api/health" -Method GET -ContentType "application/json"
    Write-Host "‚úÖ Health Check Response:" -ForegroundColor Green
    $healthResponse | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Health Check Failed: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüì§ Testing Create Product with Supabase URLs..." -ForegroundColor Cyan

# 2. Test Create Product v·ªõi Supabase URLs
$carProductData = @{
    title = "VinFast VF8 2023 - Xe ƒëi·ªán cao c·∫•p"
    description = "Xe ƒëi·ªán VinFast VF8 phi√™n b·∫£n cao c·∫•p, m√†u tr·∫Øng, n·ªôi th·∫•t da, ƒë√£ ƒëi 5000km, c√≤n b·∫£o h√†nh ch√≠nh h√£ng 3 nƒÉm. Xe ƒë∆∞·ª£c b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ t·∫°i ƒë·∫°i l√Ω ch√≠nh h√£ng."
    price = 1200000000
    category = "car"
    condition = "ƒê√£ s·ª≠ d·ª•ng (C√≤n m·ªõi)"
    brand = "VinFast"
    year = 2023
    color = "Tr·∫Øng"
    origin = "S·∫£n xu·∫•t trong n∆∞·ªõc"
    region = "H√† N·ªôi"
    negotiable = $true
    imageUrls = @(
        "https://rvmbqoitqkxzvmwryddx.supabase.co/storage/v1/object/public/product-images/products/test_car_1.jpg",
        "https://rvmbqoitqkxzvmwryddx.supabase.co/storage/v1/object/public/product-images/products/test_car_2.jpg",
        "https://rvmbqoitqkxzvmwryddx.supabase.co/storage/v1/object/public/product-images/products/test_car_3.jpg"
    )
    bodyType = "SUV"
    seats = "7 ch·ªó"
    location = @{
        city = "H√† N·ªôi"
        district = "Ba ƒê√¨nh"
        ward = "Ph√∫c X√°"
        address = "123 ƒê∆∞·ªùng Ho√†ng Hoa Th√°m"
    }
    contact = @{
        name = "Nguy·ªÖn VƒÉn Test"
        phone = "0987654321"
    }
    createdAt = "2023-10-18T10:30:00.000Z"
    status = "active"
}

try {
    $carJson = $carProductData | ConvertTo-Json -Depth 4
    $carResponse = Invoke-RestMethod -Uri "http://14.225.206.98:8080/api/products" -Method POST -Body $carJson -ContentType "application/json"
    Write-Host "‚úÖ Car Product Response:" -ForegroundColor Green
    $carResponse | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Car Product Creation Failed: $($_.Exception.Message)" -ForegroundColor Red
    if ($_.Exception.Response) {
        $errorResponse = $_.Exception.Response.GetResponseStream()
        $reader = New-Object System.IO.StreamReader($errorResponse)
        $errorBody = $reader.ReadToEnd()
        Write-Host "Error Details: $errorBody" -ForegroundColor Red
    }
}

Write-Host "`nüîã Testing Create Battery Product..." -ForegroundColor Cyan

# 3. Test Create Battery Product
$batteryProductData = @{
    title = "Pin Panasonic 60kWh cho xe ƒëi·ªán - C√≤n 95% dung l∆∞·ª£ng"
    description = "Pin Panasonic Li-ion 60kWh, s·ª≠ d·ª•ng 1 nƒÉm, c√≤n 95% dung l∆∞·ª£ng ban ƒë·∫ßu. C√≥ ƒë·∫ßy ƒë·ªß gi·∫•y t·ªù, b·∫£o h√†nh c√≤n 2 nƒÉm. Pin ph√π h·ª£p v·ªõi c√°c d√≤ng xe VinFast VF8, VF9."
    price = 300000000
    category = "battery"
    condition = "ƒê√£ s·ª≠ d·ª•ng (T·ªët)"
    brand = "Panasonic"
    year = 2023
    color = "ƒêen"
    origin = "Nh·∫≠p kh·∫©u"
    region = "TP. H·ªì Ch√≠ Minh"
    negotiable = $false
    imageUrls = @(
        "https://rvmbqoitqkxzvmwryddx.supabase.co/storage/v1/object/public/product-images/products/test_battery_1.jpg",
        "https://rvmbqoitqkxzvmwryddx.supabase.co/storage/v1/object/public/product-images/products/test_battery_2.jpg"
    )
    batteryType = "Li-ion"
    capacity = "60kWh"
    location = @{
        city = "TP. H·ªì Ch√≠ Minh"
        district = "Qu·∫≠n 1"
        ward = "Ph∆∞·ªùng B·∫øn Ngh√©"
        address = "456 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá"
    }
    contact = @{
        name = "Tr·∫ßn Th·ªã Test"
        phone = "0123456789"
    }
    createdAt = "2023-10-18T14:15:00.000Z"
    status = "active"
}

try {
    $batteryJson = $batteryProductData | ConvertTo-Json -Depth 4
    $batteryResponse = Invoke-RestMethod -Uri "http://14.225.206.98:8080/api/products" -Method POST -Body $batteryJson -ContentType "application/json"
    Write-Host "‚úÖ Battery Product Response:" -ForegroundColor Green
    $batteryResponse | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå Battery Product Creation Failed: $($_.Exception.Message)" -ForegroundColor Red
    if ($_.Exception.Response) {
        $errorResponse = $_.Exception.Response.GetResponseStream()
        $reader = New-Object System.IO.StreamReader($errorResponse)
        $errorBody = $reader.ReadToEnd()
        Write-Host "Error Details: $errorBody" -ForegroundColor Red
    }
}

Write-Host "`n‚úÖ Test completed!" -ForegroundColor Green