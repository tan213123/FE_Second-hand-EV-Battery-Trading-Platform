import React, { useState, useCallback } from 'react';
import { authAPI, authUtils } from '../../services/auth';
import './signup.scss';

const Input = ({ label, type, name, value, onChange, placeholder, error, autoComplete }) => {
  return (
    <div className="form-group">
      <label>{label}</label>
      <input
        type={type}
        name={name}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        autoComplete={autoComplete}
        className={error ? 'error' : ''}
      />
      {error && <span className="error-text">{error}</span>}
    </div>
  );
};

// Button component
const Button = ({ children, type = 'button', onClick, variant = 'primary', fullWidth = false, disabled }) => {
  const buttonClasses = `button ${variant} ${fullWidth ? 'full-width' : ''}`;
  return (
    <button
      type={type}
      onClick={onClick}
      className={buttonClasses.trim()}
      disabled={disabled}
    >
      {children}
    </button>
  );
};

// SocialLogin component
const SocialLogin = ({ onGoogleLogin }) => {
  return (
    <div className="social-buttons">
      <button className="google-btn" onClick={onGoogleLogin}>
        Ti·∫øp t·ª•c v·ªõi Google
      </button>
    </div>
  );
};

const SignUpPage = () => {
  const [formData, setFormData] = useState({
    name: '',
    address: '',
    yearOfBirth: '',
    phone: '',
    email: '',
    sex: '',
    status: '',
    password: '',
    confirmPassword: ''
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleChange = useCallback((e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  }, [errors]);

  const validateForm = useCallback(() => {
    const newErrors = {};
    
    if (!formData.name) {
      newErrors.name = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n';
    }

    if (!formData.address) {
      newErrors.address = 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ';
    }

    if (!formData.yearOfBirth) {
      newErrors.yearOfBirth = 'Vui l√≤ng ch·ªçn ng√†y sinh';
    }

    if (!formData.phone) {
      newErrors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    } else if (!/^\d+$/.test(formData.phone)) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ s·ªë';
    }

    if (!formData.email) {
      newErrors.email = 'Vui l√≤ng nh·∫≠p email';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá';
    }

    if (!formData.password) {
      newErrors.password = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp';
    }

    return newErrors;
  }, [formData]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newErrors = validateForm();
    
    if (Object.keys(newErrors).length === 0) {
      setIsSubmitting(true);
      try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω v·ªõi:', formData);
        
        // G·ªçi API ƒëƒÉng k√Ω
        console.log('üì° G·ªçi API register...');
        const response = await authAPI.register({
          name: formData.name,
          email: formData.email,
          password: formData.password,
          phone: formData.phone,
          address: formData.address,
          yearOfBirth: formData.yearOfBirth,
          gender: formData.gender
        });
        
        console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:', response);
        console.log('üìä Response data:', response.data);
        console.log('üìä Response status:', response.status);
        
        // L∆∞u token v√† th√¥ng tin user
        if (response.data.token) {
          authUtils.setToken(response.data.token);
          authUtils.setUser(response.data.user);
        }
        
        alert('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.');
        
        // Redirect to login after successful signup
        window.location.href = '/login';
      } catch (error) {
        console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', error);
        console.error('‚ùå Error response:', error.response);
        console.error('‚ùå Error status:', error.response?.status);
        console.error('‚ùå Error data:', error.response?.data);
        console.error('‚ùå Error message:', error.message);
        
        let errorMessage = 'ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
        
        if (error.response?.data?.message) {
          errorMessage = error.response.data.message;
        } else if (error.response?.status === 400) {
          errorMessage = 'Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.';
        } else if (error.response?.status === 409) {
          errorMessage = 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn email kh√°c.';
        } else if (error.response?.status === 500) {
          errorMessage = 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
        } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {
          errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.';
        } else if (error.message.includes('timeout')) {
          errorMessage = 'K·∫øt n·ªëi qu√° l√¢u. Vui l√≤ng th·ª≠ l·∫°i.';
        }
        
        console.log('üí¨ Error message hi·ªÉn th·ªã:', errorMessage);
        
        setErrors({
          submit: errorMessage
        });
      } finally {
        setIsSubmitting(false);
      }
    } else {
      setErrors(newErrors);
    }
  };

  const handleSocialLogin = useCallback((provider) => {
    console.log(`ƒêƒÉng k√Ω v·ªõi ${provider}`);
  }, []);

  return (
    <div className="signup-container">
      <form className="signup-form" onSubmit={handleSubmit}>
        <h1>T·∫°o t√†i kho·∫£n</h1>
        <p className="login-text">
          ƒê√£ c√≥ t√†i kho·∫£n? <a href="/login">ƒêƒÉng nh·∫≠p</a>
        </p>

        {errors.submit && <div className="error-message">{errors.submit}</div>}

        <div className="form-grid">
          <Input
            label="H·ªç v√† t√™n*"
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            placeholder="Nh·∫≠p h·ªç v√† t√™n"
            autoComplete="name"
            error={errors.name}
          />

          <Input
            label="Email*"
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            placeholder="ban@vidu.com"
            autoComplete="email"
            error={errors.email}
          />

          <Input
            label="S·ªë ƒëi·ªán tho·∫°i*"
            type="tel"
            name="phone"
            value={formData.phone}
            onChange={handleChange}
            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            autoComplete="tel"
            error={errors.phone}
          />

          <Input
            label="Ng√†y sinh*"
            type="date"
            name="yearOfBirth"
            value={formData.yearOfBirth}
            onChange={handleChange}
            autoComplete="bday"
            error={errors.yearOfBirth}
          />

          <Input
            label="ƒê·ªãa ch·ªâ*"
            type="text"
            name="address"
            value={formData.address}
            onChange={handleChange}
            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
            autoComplete="street-address"
            error={errors.address}
          />
        </div>

        <div className="form-group">
          <label>Gi·ªõi t√≠nh</label>
          <select
            name="sex"
            value={formData.sex}
            onChange={handleChange}
            className={errors.sex ? 'error' : ''}
          >
            <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
            <option value="male">Nam</option>
            <option value="female">N·ªØ</option>
            <option value="other">Kh√°c</option>
          </select>
          {errors.sex && <span className="error-text">{errors.sex}</span>}
        </div>

        <div className="form-group">
          <label>Tr·∫°ng th√°i</label>
          <select
            name="status"
            value={formData.status}
            onChange={handleChange}
            className={errors.status ? 'error' : ''}
          >
            <option value="">Ch·ªçn tr·∫°ng th√°i</option>
            <option value="active">Ho·∫°t ƒë·ªông</option>
            <option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</option>
          </select>
          {errors.status && <span className="error-text">{errors.status}</span>}
        </div>

        <Input
          label="M·∫≠t kh·∫©u*"
          type="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
          placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
          autoComplete="new-password"
          error={errors.password}
        />

        <Input
          label="X√°c nh·∫≠n m·∫≠t kh·∫©u*"
          type="password"
          name="confirmPassword"
          value={formData.confirmPassword}
          onChange={handleChange}
          placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
          autoComplete="new-password"
          error={errors.confirmPassword}
        />

        <div className="password-requirements">
          <ul>
            <li className={formData.password.length >= 6 ? 'valid' : ''}>√çt nh·∫•t 6 k√Ω t·ª±</li>
            <li className={/[A-Z]/.test(formData.password) ? 'valid' : ''}>√çt nh·∫•t m·ªôt ch·ªØ hoa</li>
            <li className={/\d/.test(formData.password) ? 'valid' : ''}>√çt nh·∫•t m·ªôt ch·ªØ s·ªë</li>
          </ul>
        </div>

        <div className="terms-checkbox">
          <label>
            <input type="checkbox" required />
            <span>
              T√¥i ƒë·ªìng √Ω v·ªõi <a href="/terms" target="_blank" rel="noreferrer">ƒêi·ªÅu kho·∫£n</a> v√†
              <a href="/privacy" target="_blank" rel="noreferrer"> Ch√≠nh s√°ch quy·ªÅn ri√™ng t∆∞</a>.
            </span>
          </label>
        </div>

        <Button 
          type="submit" 
          variant="primary" 
          fullWidth 
          disabled={isSubmitting}
        >
          {isSubmitting ? 'ƒêang t·∫°o t√†i kho·∫£n...' : 'ƒêƒÉng k√Ω'}
        </Button>

        <div className="divider">
          <span>ho·∫∑c</span>
        </div>

        <SocialLogin 
          onGoogleLogin={() => handleSocialLogin('Google')}
        />

        <div className="footer-links">
          <a href="/terms">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a>
          <a href="/privacy">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
        </div>
      </form>
    </div>
  );
};

export default SignUpPage;