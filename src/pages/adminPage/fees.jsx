import React, { useState, useEffect } from 'react';
import api from '../../config/api';
import './fees.scss';

const defaultPackages = [
  {
    id: 'pkg1',
    name: 'G√≥i Ti√™u chu·∫©n',
    type: 'standard',
    price: 50000,
    duration: '15 ng√†y',
    icon: '‚≠ê',
    color: '#10b981',
    active: true,
    features: [
      { text: 'ƒêƒÉng 3 tin', included: true },
      { text: 'Hi·ªÉn th·ªã trong 15 ng√†y', included: true },
      { text: 'ƒê∆∞·ª£c ƒë·∫©y tin 3 l·∫ßn', included: true },
      { text: 'H·ªó tr·ª£ ∆∞u ti√™n', included: true },
      { text: 'Hi·ªÉn th·ªã tr√™n trang ch·ªß', included: true },
      { text: 'Nh√£n "Tin n·ªïi b·∫≠t"', included: true },
      { text: '∆Øu ti√™n hi·ªÉn th·ªã', included: false },
      { text: 'H·ªó tr·ª£ 24/7', included: false }
    ],
    popular: false
  },
  {
    id: 'pkg2',
    name: 'G√≥i Pro',
    type: 'pro',
    price: 150000,
    duration: '30 ng√†y',
    icon: 'üëë',
    color: '#f59e0b',
    active: true,
    features: [
      { text: 'ƒêƒÉng kh√¥ng gi·ªõi h·∫°n', included: true },
      { text: 'Hi·ªÉn th·ªã trong 30 ng√†y', included: true },
      { text: 'ƒê∆∞·ª£c ƒë·∫©y tin kh√¥ng gi·ªõi h·∫°n', included: true },
      { text: 'H·ªó tr·ª£ VIP', included: true },
      { text: 'Hi·ªÉn th·ªã tr√™n trang ch·ªß', included: true },
      { text: 'Nh√£n "Tin n·ªïi b·∫≠t"', included: true },
      { text: '∆Øu ti√™n hi·ªÉn th·ªã h√†ng ƒë·∫ßu', included: true },
      { text: 'H·ªó tr·ª£ 24/7', included: true }
    ],
    popular: true
  },
  {
    id: 'pkg3',
    name: 'G√≥i ƒê·∫•u gi√°',
    type: 'enterprise',
    price: 500000,
    duration: '90 ng√†y',
    icon: 'üíº',
    color: '#8b5cf6',
    active: true,
    features: [
      { text: 'ƒêƒÉng kh√¥ng gi·ªõi h·∫°n', included: true },
      { text: 'Hi·ªÉn th·ªã trong 90 ng√†y', included: true },
      { text: 'ƒê∆∞·ª£c ƒë·∫©y tin kh√¥ng gi·ªõi h·∫°n', included: true },
      { text: 'H·ªó tr·ª£ VIP ƒë·∫∑c bi·ªát', included: true },
      { text: 'Lu√¥n hi·ªÉn th·ªã tr√™n trang ch·ªß', included: true },
      { text: 'Nh√£n "ƒê·ªëi t√°c ∆∞u ti√™n"', included: true },
      { text: '∆Øu ti√™n hi·ªÉn th·ªã cao nh·∫•t', included: true },
      { text: 'H·ªó tr·ª£ 24/7 + Auction Account', included: true }
    ],
    popular: false
  }
];

const Fees = () => {
  const [packages, setPackages] = useState(defaultPackages);
  const [editing, setEditing] = useState(null);
  const [form, setForm] = useState({
    name: '',
    type: '',
    price: '',
    duration: '',
    icon: '‚≠ê',
    features: [],
    color: '#10b981',
    popular: false
  });
  const [showModal, setShowModal] = useState(false);
  const [currentFeature, setCurrentFeature] = useState('');

  const startAdd = () => {
    setEditing('new');
    setForm({
      name: '',
      type: '',
      price: '',
      duration: '',
      icon: '‚≠ê',
      features: [],
      color: '#10b981',
      popular: false
    });
    setShowModal(true);
  };

  const startEdit = (pkg) => {
    setEditing(pkg.id);
    setForm({
      name: pkg.name,
      type: pkg.type || '',
      price: pkg.price,
      duration: pkg.duration,
      icon: pkg.icon || '‚≠ê',
      features: [...pkg.features],
      color: pkg.color,
      popular: pkg.popular || false
    });
    setShowModal(true);
  };

  const cancel = () => {
    setEditing(null);
    setShowModal(false);
    setForm({
      name: '',
      type: '',
      price: '',
      duration: '',
      icon: '‚≠ê',
      features: [],
      color: '#10b981',
      popular: false
    });
  };

  const [featureIncluded, setFeatureIncluded] = useState(true);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // L·∫•y danh s√°ch g√≥i t·ª´ API khi component mount
  useEffect(() => {
    fetchPackages();
  }, []);

  // Fetch packages from API
  const fetchPackages = async () => {
    try {
      setLoading(true);
      const response = await api.get('/packages');
      if (response.data && response.data.length > 0) {
        setPackages(response.data);
      }
      setError(null);
    } catch (error) {
      console.error('Error fetching packages:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch g√≥i. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh.');
      // Gi·ªØ defaultPackages n·∫øu API l·ªói
    } finally {
      setLoading(false);
    }
  };

  const addFeature = () => {
    if (currentFeature.trim()) {
      setForm(prev => ({
        ...prev,
        features: [...prev.features, { text: currentFeature.trim(), included: featureIncluded }]
      }));
      setCurrentFeature('');
    }
  };

  const removeFeature = (index) => {
    setForm(prev => ({
      ...prev,
      features: prev.features.filter((_, i) => i !== index)
    }));
  };

  const save = async () => {
    if (!form.name || !form.price || !form.duration) {
      alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin g√≥i');
      return;
    }

    const packageData = {
      name: form.name,
      type: form.type || 'custom',
      price: Number(form.price),
      duration: form.duration,
      icon: form.icon,
      features: form.features,
      color: form.color,
      popular: form.popular,
      active: true
    };

    try {
      setLoading(true);
      
      if (editing === 'new') {
        // T·∫°o g√≥i m·ªõi - G·ªåI API POST
        const response = await api.post('/packages', packageData);
        console.log('‚úÖ G√≥i m·ªõi ƒë∆∞·ª£c t·∫°o:', response.data);
        
        // C·∫≠p nh·∫≠t state v·ªõi data t·ª´ API
        if (response.data) {
          setPackages(prev => [...prev, response.data]);
        } else {
          // Fallback n·∫øu API kh√¥ng tr·∫£ v·ªÅ data
          const id = `pkg${packages.length + 1}`;
          setPackages(prev => [...prev, { id, ...packageData }]);
        }
        
        alert('‚úÖ T·∫°o g√≥i m·ªõi th√†nh c√¥ng!');
      } else {
        // C·∫≠p nh·∫≠t g√≥i - G·ªåI API PUT/PATCH
        const response = await api.put(`/packages/${editing}`, packageData);
        console.log('‚úÖ Gi√° g√≥i ƒë∆∞·ª£c c·∫≠p nh·∫≠t:', response.data);
        
        // C·∫≠p nh·∫≠t state v·ªõi data t·ª´ API
        setPackages(prev => prev.map(p => p.id === editing ? {
          ...p,
          ...packageData,
          id: p.id // Gi·ªØ l·∫°i ID c≈©
        } : p));
        
        alert('‚úÖ C·∫≠p nh·∫≠t gi√° th√†nh c√¥ng! Gi√° m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng.');
      }
      
      setError(null);
      cancel();
    } catch (error) {
      console.error('‚ùå L·ªói khi l∆∞u g√≥i:', error);
      
      // Hi·ªÉn th·ªã l·ªói chi ti·∫øt
      const errorMsg = error.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ l∆∞u thay ƒë·ªïi';
      alert(`‚ùå L·ªói: ${errorMsg}\n\nƒêang l∆∞u t·∫°m th·ªùi v√†o local...`);
      
      // Fallback: l∆∞u v√†o state local n·∫øu API l·ªói
      if (editing === 'new') {
        const id = `pkg${packages.length + 1}`;
        setPackages(prev => [...prev, { id, ...packageData }]);
      } else {
        setPackages(prev => prev.map(p => p.id === editing ? {
          ...p,
          ...packageData
        } : p));
      }
      
      cancel();
    } finally {
      setLoading(false);
    }
  };

  const remove = async (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a g√≥i n√†y kh√¥ng?')) {
      try {
        setLoading(true);
        
        // G·ªåI API DELETE
        await api.delete(`/packages/${id}`);
        console.log('‚úÖ G√≥i ƒë√£ ƒë∆∞·ª£c x√≥a:', id);
        
        // C·∫≠p nh·∫≠t state
        setPackages(prev => prev.filter(p => p.id !== id));
        alert('‚úÖ X√≥a g√≥i th√†nh c√¥ng!');
        setError(null);
      } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a g√≥i:', error);
        const errorMsg = error.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ x√≥a g√≥i';
        alert(`‚ùå L·ªói: ${errorMsg}\n\nƒêang x√≥a t·∫°m th·ªùi kh·ªèi local...`);
        
        // Fallback: x√≥a kh·ªèi state local
        setPackages(prev => prev.filter(p => p.id !== id));
      } finally {
        setLoading(false);
      }
    }
  };

  const toggleActive = async (id) => {
    try {
      setLoading(true);
      
      // T√¨m package hi·ªán t·∫°i
      const pkg = packages.find(p => p.id === id);
      if (!pkg) return;
      
      // G·ªåI API PATCH ƒë·ªÉ c·∫≠p nh·∫≠t status
      await api.patch(`/packages/${id}`, { active: !pkg.active });
      console.log('‚úÖ Tr·∫°ng th√°i g√≥i ƒë∆∞·ª£c c·∫≠p nh·∫≠t:', id);
      
      // C·∫≠p nh·∫≠t state
      setPackages(prev => 
        prev.map(p => p.id === id ? { ...p, active: !p.active } : p)
      );
      setError(null);
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
      alert('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i. ƒêang c·∫≠p nh·∫≠t t·∫°m th·ªùi...');
      
      // Fallback: c·∫≠p nh·∫≠t local
      setPackages(prev => 
        prev.map(p => p.id === id ? { ...p, active: !p.active } : p)
      );
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  return (
    <div className="fees-management">
      <div className="page-header">
        <div>
          <h2>Qu·∫£n l√Ω g√≥i d·ªãch v·ª•</h2>
          <p>Thi·∫øt l·∫≠p v√† qu·∫£n l√Ω c√°c g√≥i d·ªãch v·ª• cho ng∆∞·ªùi d√πng</p>
        </div>
        <button className="btn-primary" onClick={startAdd} disabled={loading}>
          <span>‚ûï</span> {loading ? 'ƒêang x·ª≠ l√Ω...' : 'Th√™m g√≥i m·ªõi'}
        </button>
      </div>

      {/* Loading Indicator */}
      {loading && (
        <div className="loading-overlay">
          <div className="spinner"></div>
          <p>ƒêang x·ª≠ l√Ω...</p>
        </div>
      )}

      {/* Error Message */}
      {error && (
        <div className="error-message">
          ‚ö†Ô∏è {error}
        </div>
      )}

      <div className="packages-grid">
        {packages.map(pkg => (
          <div 
            key={pkg.id} 
            className={`package-card ${pkg.popular ? 'popular' : ''} ${!pkg.active ? 'inactive' : ''}`}
            style={{'--package-color': pkg.color}}
          >
            {pkg.popular && <div className="popular-badge">‚≠ê Ph·ªï bi·∫øn nh·∫•t</div>}
            {!pkg.active && <div className="inactive-badge">ƒê√£ t·∫Øt</div>}
            
            <div className="package-header">
              <div className="package-icon">{pkg.icon}</div>
              <h3>{pkg.name}</h3>
              <div className="price">
                <span className="amount">{formatPrice(pkg.price)}</span>
                <span className="duration">/{pkg.duration}</span>
              </div>
            </div>

            <div className="package-features">
              <ul>
                {pkg.features.map((feature, index) => (
                  <li key={index} className={feature.included ? 'included' : 'excluded'}>
                    <span className="feature-icon">{feature.included ? '‚úì' : '‚úï'}</span>
                    {feature.text}
                  </li>
                ))}
              </ul>
            </div>

            <div className="package-actions">
              <button className="btn-edit" onClick={() => startEdit(pkg)}>
                ‚úèÔ∏è S·ª≠a
              </button>
              <button 
                className={`btn-toggle ${pkg.active ? 'active' : ''}`}
                onClick={() => toggleActive(pkg.id)}
              >
                {pkg.active ? 'üî¥ T·∫Øt' : 'üü¢ B·∫≠t'}
              </button>
              <button className="btn-delete" onClick={() => remove(pkg.id)}>
                üóëÔ∏è X√≥a
              </button>
            </div>
          </div>
        ))}
      </div>

      {showModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>{editing === 'new' ? 'Th√™m g√≥i m·ªõi' : 'Ch·ªânh s·ª≠a g√≥i'}</h3>
              <button className="btn-close" onClick={cancel}>√ó</button>
            </div>

            <div className="modal-body">
              <div className="form-row">
                <div className="form-group">
                  <label>T√™n g√≥i</label>
                  <input
                    value={form.name}
                    onChange={e => setForm(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="VD: G√≥i Pro"
                  />
                </div>

                <div className="form-group">
                  <label>Lo·∫°i g√≥i</label>
                  <select
                    value={form.type}
                    onChange={e => setForm(prev => ({ ...prev, type: e.target.value }))}
                  >
                    <option value="">Ch·ªçn lo·∫°i</option>
                    <option value="standard">Ti√™u chu·∫©n</option>
                    <option value="pro">Pro</option>
                    <option value="enterprise">ƒê·∫•u gi√°</option>
                    <option value="custom">T√πy ch·ªânh</option>
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Gi√° (VND)</label>
                  <input
                    type="number"
                    value={form.price}
                    onChange={e => setForm(prev => ({ ...prev, price: e.target.value }))}
                    placeholder="VD: 150000"
                  />
                </div>

                <div className="form-group">
                  <label>Th·ªùi h·∫°n</label>
                  <input
                    type="text"
                    value={form.duration}
                    onChange={e => setForm(prev => ({ ...prev, duration: e.target.value }))}
                    placeholder="VD: 30 ng√†y"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Icon (Emoji)</label>
                  <select
                    value={form.icon}
                    onChange={e => setForm(prev => ({ ...prev, icon: e.target.value }))}
                  >
                    <option value="‚≠ê">‚≠ê Ng√¥i sao</option>
                    <option value="üëë">üëë V∆∞∆°ng mi·ªán</option>
                    <option value="üíº">üíº C·∫∑p</option>
                    <option value="üéØ">üéØ M·ª•c ti√™u</option>
                    <option value="üöÄ">üöÄ T√™n l·ª≠a</option>
                    <option value="üíé">üíé Kim c∆∞∆°ng</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>M√†u s·∫Øc</label>
                  <input
                    type="color"
                    value={form.color}
                    onChange={e => setForm(prev => ({ ...prev, color: e.target.value }))}
                  />
                </div>
              </div>

              <div className="form-group checkbox">
                <label>
                  <input
                    type="checkbox"
                    checked={form.popular}
                    onChange={e => setForm(prev => ({ ...prev, popular: e.target.checked }))}
                  />
                  <span>ƒê√°nh d·∫•u l√† g√≥i ph·ªï bi·∫øn nh·∫•t</span>
                </label>
              </div>

              <div className="form-group">
                <label>T√≠nh nƒÉng c·ªßa g√≥i</label>
                <div className="feature-input">
                  <input
                    value={currentFeature}
                    onChange={e => setCurrentFeature(e.target.value)}
                    placeholder="Nh·∫≠p t√≠nh nƒÉng"
                    onKeyPress={e => e.key === 'Enter' && (e.preventDefault(), addFeature())}
                  />
                  <label className="feature-checkbox">
                    <input
                      type="checkbox"
                      checked={featureIncluded}
                      onChange={e => setFeatureIncluded(e.target.checked)}
                    />
                    <span>Bao g·ªìm</span>
                  </label>
                  <button type="button" onClick={addFeature}>Th√™m</button>
                </div>
                <ul className="features-list">
                  {form.features.map((feature, index) => (
                    <li key={index} className={feature.included ? 'included' : 'excluded'}>
                      <span className="feature-icon">{feature.included ? '‚úì' : '‚úï'}</span>
                      <span className="feature-text">{feature.text}</span>
                      <button type="button" onClick={() => removeFeature(index)}>√ó</button>
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            <div className="modal-footer">
              <button className="btn-secondary" onClick={cancel}>H·ªßy</button>
              <button className="btn-primary" onClick={save}>L∆∞u</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Fees;
