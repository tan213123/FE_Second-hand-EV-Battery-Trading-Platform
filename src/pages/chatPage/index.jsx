import React, { useState, useEffect, useRef } from 'react'
import './index.scss'

// Icon Components
const SearchIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="11" cy="11" r="8"/>
    <path d="m21 21-4.35-4.35"/>
  </svg>
)

const MoreIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
    <circle cx="12" cy="5" r="2"/>
    <circle cx="12" cy="12" r="2"/>
    <circle cx="12" cy="19" r="2"/>
  </svg>
)

const ChatBubbleIcon = () => (
  <svg width="120" height="120" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
  </svg>
)

function ChatPage({ onNavigate }) {
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState('all') // 'all' or 'unread'
  const [selectedChat, setSelectedChat] = useState(null) // Selected chat ID
  const [newMessage, setNewMessage] = useState('') // New message input
  const [messages, setMessages] = useState({}) // Store all messages
  
  // Mock data for conversations - Updated to electric vehicles
  const conversations = [
    {
      id: 1,
      name: 'Nguy·ªÖn VƒÉn A',
      lastMessage: 'Xe ƒëi·ªán n√†y c√≤n b√°n kh√¥ng ·∫°?',
      time: '10:30',
      unread: true,
      avatar: 'üë®',
      product: 'VinFast VF e34 2024'
    },
    {
      id: 2,
      name: 'Tr·∫ßn Th·ªã B',
      lastMessage: 'Pin xe ƒëi·ªán c√≥ b·ªÅn kh√¥ng?',
      time: '09:15',
      unread: false,
      avatar: 'üë©',
      product: 'Tesla Model 3'
    },
    {
      id: 3,
      name: 'L√™ VƒÉn C',
      lastMessage: 'Xe ƒëi·ªán ƒë√£ b√°n ch∆∞a?',
      time: '08:45',
      unread: true,
      avatar: 'üë®‚Äçüíº',
      product: 'BMW iX3'
    },
    {
      id: 4,
      name: 'Ph·∫°m Th·ªã D',
      lastMessage: 'C·∫£m ∆°n b·∫°n!',
      time: 'H√¥m qua',
      unread: false,
      avatar: 'üë©‚Äçüíº',
      product: 'Audi e-tron'
    },
    {
      id: 5,
      name: 'Ho√†ng VƒÉn E',
      lastMessage: 'T√¥i s·∫Ω ƒë·∫øn xem xe ƒëi·ªán v√†o cu·ªëi tu·∫ßn',
      time: 'H√¥m qua',
      unread: true,
      avatar: 'üë®‚Äçüéì',
      product: 'Mercedes EQC'
    }
  ]

  // Initialize messages with mock data
  const initializeMessages = () => {
    const initialMessages = {
      1: [
        { id: 1, sender: 'other', message: 'Ch√†o b·∫°n, t√¥i quan t√¢m ƒë·∫øn chi·∫øc VinFast VF e34 n√†y', time: '10:25' },
        { id: 2, sender: 'other', message: 'Xe ƒëi·ªán n√†y c√≤n b√°n kh√¥ng ·∫°?', time: '10:30' },
        { id: 3, sender: 'me', message: 'Ch√†o b·∫°n! Xe v·∫´n c√≤n b√°n nh√©', time: '10:32' },
        { id: 4, sender: 'me', message: 'B·∫°n c√≥ mu·ªën xem xe kh√¥ng?', time: '10:33' },
        { id: 5, sender: 'other', message: 'C√≥, t√¥i mu·ªën xem xe v√†o cu·ªëi tu·∫ßn n√†y', time: '10:35' },
        { id: 6, sender: 'me', message: 'Tuy·ªát! T√¥i s·∫Ω g·ª≠i ƒë·ªãa ch·ªâ cho b·∫°n', time: '10:36' },
        { id: 7, sender: 'other', message: 'C·∫£m ∆°n b·∫°n nhi·ªÅu!', time: '10:37' }
      ],
      2: [
        { id: 1, sender: 'other', message: 'Pin xe ƒëi·ªán c√≥ b·ªÅn kh√¥ng?', time: '09:15' },
        { id: 2, sender: 'me', message: 'Pin Tesla r·∫•t b·ªÅn, c√≥ th·ªÉ ƒëi ƒë∆∞·ª£c 500km', time: '09:20' },
        { id: 3, sender: 'other', message: 'Th·ªùi gian s·∫°c m·∫•t bao l√¢u?', time: '09:22' },
        { id: 4, sender: 'me', message: 'S·∫°c nhanh 30 ph√∫t, s·∫°c th∆∞·ªùng 8 ti·∫øng', time: '09:25' },
        { id: 5, sender: 'other', message: 'C·∫£m ∆°n b·∫°n!', time: '09:26' }
      ],
      3: [
        { id: 1, sender: 'other', message: 'Xe ƒëi·ªán ƒë√£ b√°n ch∆∞a?', time: '08:45' },
        { id: 2, sender: 'me', message: 'Ch∆∞a b√°n, b·∫°n quan t√¢m kh√¥ng?', time: '08:50' }
      ],
      4: [
        { id: 1, sender: 'other', message: 'Xe ƒëi·ªán ƒë√£ b√°n ch∆∞a?', time: 'H√¥m qua' },
        { id: 2, sender: 'me', message: 'Ch∆∞a b√°n, b·∫°n quan t√¢m kh√¥ng?', time: 'H√¥m qua' },
        { id: 3, sender: 'other', message: 'C·∫£m ∆°n b·∫°n!', time: 'H√¥m qua' },
        { id: 4, sender: 'me', message: 'Kh√¥ng c√≥ g√¨!', time: 'H√¥m qua' }
      ],
      5: [
        { id: 1, sender: 'other', message: 'T√¥i s·∫Ω ƒë·∫øn xem xe ƒëi·ªán v√†o cu·ªëi tu·∫ßn', time: 'H√¥m qua' },
        { id: 2, sender: 'me', message: 'ƒê∆∞·ª£c r·ªìi, t√¥i s·∫Ω ch·ªù b·∫°n', time: 'H√¥m qua' },
        { id: 3, sender: 'other', message: 'Xe c√≥ b·∫£o h√†nh kh√¥ng?', time: 'H√¥m qua' },
        { id: 4, sender: 'me', message: 'C√≥ b·∫£o h√†nh 3 nƒÉm cho pin v√† 5 nƒÉm cho xe', time: 'H√¥m qua' },
        { id: 5, sender: 'other', message: 'Tuy·ªát v·ªùi! T√¥i s·∫Ω li√™n h·ªá l·∫°i', time: 'H√¥m qua' }
      ]
    }
    return initialMessages
  }

  // Initialize messages on component mount
  useEffect(() => {
    if (Object.keys(messages).length === 0) {
      setMessages(initializeMessages())
    }
  }, [])

  // Get messages for selected chat
  const getMessages = (chatId) => {
    return messages[chatId] || []
  }

  // Filter conversations based on active tab
  const filteredConversations = conversations.filter(conv => {
    if (activeTab === 'unread') {
      return conv.unread
    }
    return true
  })

  // Filter by search term
  const searchFilteredConversations = filteredConversations.filter(conv => 
    conv.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    conv.lastMessage.toLowerCase().includes(searchTerm.toLowerCase()) ||
    conv.product.toLowerCase().includes(searchTerm.toLowerCase())
  )

  // Get selected conversation
  const selectedConversation = conversations.find(conv => conv.id === selectedChat)
  const selectedMessages = selectedChat ? getMessages(selectedChat) : []

  // Send message function
  const sendMessage = () => {
    if (!newMessage.trim() || !selectedChat) return

    const currentTime = new Date().toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })

    const newMsg = {
      id: Date.now(),
      sender: 'me',
      message: newMessage.trim(),
      time: currentTime
    }

    // Update messages state
    setMessages(prev => ({
      ...prev,
      [selectedChat]: [...(prev[selectedChat] || []), newMsg]
    }))

    // Clear input
    setNewMessage('')

    // Simulate auto-reply after 2 seconds
    setTimeout(() => {
      const autoReplies = [
        'C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m!',
        'T√¥i s·∫Ω ki·ªÉm tra v√† tr·∫£ l·ªùi b·∫°n s·ªõm',
        'Xe v·∫´n c√≤n b√°n nh√©',
        'B·∫°n c√≥ mu·ªën xem xe kh√¥ng?',
        'Gi√° c√≥ th·ªÉ th∆∞∆°ng l∆∞·ª£ng ƒë∆∞·ª£c',
        'Xe r·∫•t m·ªõi v√† √≠t s·ª≠ d·ª•ng',
        'Pin c√≤n r·∫•t t·ªët',
        'B·∫°n c√≥ th·ªÉ ƒë·∫øn xem xe b·∫•t c·ª© l√∫c n√†o',
        'T√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n',
        'C√≥ th√™m th√¥ng tin g√¨ c·∫ßn h·ªèi kh√¥ng?'
      ]
      
      const randomReply = autoReplies[Math.floor(Math.random() * autoReplies.length)]
      const replyTime = new Date().toLocaleTimeString('vi-VN', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })

      const autoMsg = {
        id: Date.now() + 1,
        sender: 'other',
        message: randomReply,
        time: replyTime
      }

      setMessages(prev => ({
        ...prev,
        [selectedChat]: [...(prev[selectedChat] || []), autoMsg]
      }))
    }, 2000)
  }

  // Handle Enter key press
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  // Auto scroll to bottom when new messages arrive
  const messagesEndRef = useRef(null)
  
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }, [selectedMessages])

  return (
    <div className="chat-page">
      <div className="chat-container">
        {/* Sidebar */}
        <div className="chat-sidebar">
          <div className="sidebar-header">
            <h1 className="sidebar-title">Chat</h1>
            <button className="more-btn">
              <MoreIcon />
            </button>
          </div>

          {/* Search Box */}
          <div className="search-box">
            <SearchIcon />
            <input
              type="text"
              placeholder="Nh·∫≠p 3 k√Ω t·ª± ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
    
          {/* Tabs */}
          <div className="chat-tabs">
            <button 
              className={`tab-btn ${activeTab === 'all' ? 'active' : ''}`}
              onClick={() => setActiveTab('all')}
            >
              T·∫•t c·∫£ tin nh·∫Øn
            </button>
            <button 
              className={`tab-btn ${activeTab === 'unread' ? 'active' : ''}`}
              onClick={() => setActiveTab('unread')}
            >
              Tin ch∆∞a ƒë·ªçc
            </button>
          </div>

          {/* Chat List */}
          <div className="chat-list">
            {searchFilteredConversations.length > 0 ? (
              searchFilteredConversations.map(conv => (
                <div 
                  key={conv.id} 
                  className={`chat-item ${selectedChat === conv.id ? 'selected' : ''}`}
                  onClick={() => setSelectedChat(conv.id)}
                >
                  <div className="chat-avatar">
                    <span className="avatar-emoji">{conv.avatar}</span>
                    {conv.unread && <div className="unread-indicator"></div>}
                  </div>
                  <div className="chat-content">
                    <div className="chat-header">
                      <h4 className="chat-name">{conv.name}</h4>
                      <span className="chat-time">{conv.time}</span>
                    </div>
                    <p className="chat-product">{conv.product}</p>
                    <p className={`chat-message ${conv.unread ? 'unread' : ''}`}>
                      {conv.lastMessage}
                    </p>
                  </div>
                </div>
              ))
            ) : (
              <div className="empty-chat-list">
                <p>Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o</p>
              </div>
            )}
          </div>
        </div>

        {/* Main Content */}
        <div className="chat-main">
          {selectedChat ? (
            <div className="chat-conversation">
              {/* Chat Header */}
              <div className="conversation-header">
                <div className="conversation-info">
                  <div className="conversation-avatar">
                    <span className="avatar-emoji">{selectedConversation?.avatar}</span>
                  </div>
                  <div className="conversation-details">
                    <h3 className="conversation-name">{selectedConversation?.name}</h3>
                    <p className="conversation-product">{selectedConversation?.product}</p>
                  </div>
                </div>
                <div className="conversation-actions">
                  <button className="action-btn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M3 3h18v18H3zM9 9h6v6H9z"/>
                    </svg>
                  </button>
                  <button className="action-btn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <circle cx="12" cy="12" r="3"/>
                      <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
                    </svg>
                  </button>
                </div>
              </div>

              {/* Messages */}
              <div className="messages-container">
                {selectedMessages.map(msg => (
                  <div key={msg.id} className={`message ${msg.sender}`}>
                    <div className="message-content">
                      <p>{msg.message}</p>
                      <span className="message-time">{msg.time}</span>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>

              {/* Message Input */}
              <div className="message-input">
                <div className="input-container">
                  <button className="attach-btn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"/>
                    </svg>
                  </button>
                  <input 
                    type="text" 
                    placeholder="Nh·∫≠p tin nh·∫Øn..." 
                    className="message-text-input"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                  />
                  <button 
                    className="send-btn"
                    onClick={sendMessage}
                    disabled={!newMessage.trim()}
                  >
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <line x1="22" y1="2" x2="11" y2="13"/>
                      <polygon points="22,2 15,22 11,13 2,9 22,2"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="empty-state">
              <div className="empty-illustration">
                <div className="chat-avatars">
                  <div className="avatar avatar-1">
                    <div className="avatar-face">‚ö°</div>
                  </div>
                  <div className="chat-bubble bubble-1">
                    <div className="dots">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                  <div className="avatar avatar-2">
                    <div className="avatar-face">üöó</div>
                  </div>
                  <div className="chat-bubble bubble-2">
                    <div className="dots">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                  <div className="sparkle sparkle-1">‚ú®</div>
                </div>
              </div>
              <h2 className="empty-title">B·∫°n ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o!</h2>
              <p className="empty-description">
                Tr·∫£i nghi·ªám chat ƒë·ªÉ l√†m r√µ th√¥ng tin v·ªÅ xe ƒëi·ªán tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu th·ª±c hi·ªán mua b√°n
              </p>
              <button 
                className="btn-home"
                onClick={() => onNavigate && onNavigate('home')}
              >
                V·ªÅ trang ch·ªß
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default ChatPage
